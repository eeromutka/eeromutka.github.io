I"¡<p>Recently I started a new project of making a CSG editor. Or, at least that‚Äôs the very first starting point for the project. I didn‚Äôt exactly know how CSG worked before, so I looked into some articles (link). I learned some very cool things, such as what a half-edge data structure is. Previously, it had been a big mystery to me how you would actually implement a 3d modeling operation such as extrusion, bevel, or inserting edge loops, but this very tiny idea really opened things up for me. It‚Äôs all so clear now! You should first read about it here aren‚Äôt familiar with it (link). You can trivially convert a half-edge mesh to a more traditional triangle-mesh that you‚Äôd feed to the GPU.</p>

<!--more-->

<p>One smart idea of CSG is that brushes are not defined by a mesh, but by a list of planes that each cut the space in half. It is much easier to perform boolean operations with lists of planes, than it is with arbitrary triangle meshes.</p>

<p><em>A note about planes: you should store 3d planes in their mathematical form of  ax + by + cz + d = 0  instead of storing a point + normal. It‚Äôs less data and less useless degrees of freedom, which you should always try to minimize. Calculating the distance of a point to the plane is simply  dot(p, plane.abc) - plane.d</em></p>

<ul>
  <li>A note about my half-edge data-structure: *</li>
</ul>

<p>I‚Äôm currently at the second part of the real-time CSG blog (link), which presents two methods for converting a list of planes into a 3d mesh. The first method, which apparently is widely used, is to project a huge axis-aligned rectangle per each cut-plane to form a polygon, then slice that polygon per each plane, and finally merge all of the vertices. My instincts agree with the article in that this seems like a dirty way to do it. We‚Äôd have to decide on a ‚Äúbig value‚Äù that covers everything. What‚Äôd happen if this value was too large? Would it cause problems? And, we‚Äôd have to use epsilons for floating point comparisons for vertex-merging, and having to merge vertices is just annoying.</p>

<p>The second, ‚Äúprecise‚Äù, method is to loop through all combinations of plane-triples to find the intersection vertices (that are also inside the shape), then generate geometry from that. My code for this looked something like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>for (int i=0; i&lt;box_planes_count-2; i++) {
    Plane plane_i = box_planes[i];
        for (int j=i+1; j&lt;box_planes_count-1; j++) {
            Plane plane_j = box_planes[j];
            for (int k=j+1; j&lt;box_planes_count; k++) {
                Plane plane_k = box_planes[k];
                
                Vector3 p;
                if (!intersection_point_three_planes(plane_i, plane_j, plane_k, &amp;p))
                    continue;
                
                bool vertex_is_on_the_brush = true;
                for (int l=0; l&lt;box_planes_count; l++) { // jesus, do we have to go through it all AGAIN?
                    if (l == i || l == j || l == k) continue;
                    
                    if (dot(p, box_planes[l].abc) + box_planes[l].d &gt; 0.000001) {
                        // the vertex is on the positive side of the plane and thus outside the brush
                        // notice that we need to use an epsilon
                        vertex_is_on_the_brush = false;
                    }
                }

                if (!vertex_is_on_the_brush) continue;

                // Add the vertex to a data-structure, but be careful! A vertex can have more than three faces surrounding
                // it, so this exact same vertex might already exist! So we need some sort of vertex merging code anyway.
                // In my code, I stored the vertex positions as three integers, so I could hash the coordinate and use a
                // hash-table to quickly lookup vertices by their coordinates. We'd also naturally get rid of issues with
                // floats by not using them. I realize now that we could also get rid of our previous epsilon by first
                // checking if the rounded vertex has already been added.
        }
    }
}
</code></pre></div></div>

<p>While implementing it, I was aware of how O(n^too-much) this was, but only after implementing I looked back at it and said, ‚ÄúYeah, that‚Äôs too much n.‚Äù I‚Äôm not entirely sure if going through all combinations of plane-triples is how you‚Äôre supposed to do it or what the article suggested, but that‚Äôs how I interpreted it and can‚Äôt think of another way. I don‚Äôt want my editor to slow down with cylinders with many sides.</p>

<p>I started thinking about this problem and why the ‚Äúclean‚Äù solution is more work than the dumb and dirty solution, that was <em>only</em> O(n^2). Looking at a sketch I made, if we add another line (or a plane in 3d), the vast majority of intersection points will be outside the shape and unnecessary work:</p>

<p><img alt="Lots of edges" src="/israh-jekyll-theme/media/lots_of_edges.png" /></p>

<p>Maybe we could keep a sort-of bounding box that we would shrink with each plane and discard planes and vertices that lie outside it? That seems pretty complex and an after-thought. I looked into known methods for solving the <a href="https://en.wikipedia.org/wiki/Vertex_enumeration_problem">vertex enumeration problem</a>, such as <a href="https://link.springer.com/chapter/10.1007/3-540-61576-8_77">this</a> ‚Äúsimple‚Äù and <a href="http://cgm.cs.mcgill.ca/~avis/doc/avis/AF92b.pdf">this</a> ‚Äúextremely simple‚Äù algorithm. Suffice to say, I didn‚Äôt get far.</p>

<p>I nearly finished implementing the dumb projected-rectangle method until it came to me: why don‚Äôt we start with a cube directly? I‚Äôd need to make it possible to cut any abrbitrary mesh by a plane later on anyway, so I could just hand-craft the vertices half-edges and faces for a box, scale it up, and use that as a starting point for cutting!</p>

<p>The first method is O(n^2), but the second is even worse.
I started implementing the first method.</p>

<p>After implementing both, I realized that I could just start from a hand-crafted cube mesh, make it huge, then make a function that cuts that by a plane. I would be needing very similar functionality afterwards anyway when cutting geometry by the brushes. This method just so happens to also be a really fast and stable</p>

<p>what I want to start with.  at least t that</p>

<p>This is just a test post. I will remove it soon enough.</p>

:ET